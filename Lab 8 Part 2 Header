#ifndef ORDER  //  if not defined
#define ORDER  //  then define ORDER

#include <iostream>
#include<string>
#include<fstream>
using namespace std;


class ORDERED_LIST{
private:  struct node{  //  node stuffs
	int acctNo;  //  account number of type int
	string name;  //  name of type string
	float balance;
	node *next; //  bring me to the next door
};
		  node *list;  //  master key
public:  ORDERED_LIST();   //  constructor
		 void insert(int, string, float);

		 void showBalance(int);  //  show the balance of the acct
		 void deposit(int);  //  deposit money into the acct
		 void withdraw(int);  //  withdraw money into the acct
		 void display();  //  display linked list
};

ORDERED_LIST::ORDERED_LIST(){
	list = NULL;  //  set the master key to null
}


void ORDERED_LIST::insert(int no, string name, float bal){
	node *p = list, *q = list, *r;  //  create new copies of keys and nodes
	r = new node;  //  create a new node, make space for it
	r->acctNo = no;
	r->name = name;
	r->balance = bal;
	r->next = NULL;  //  it points to nothing
	//  find where to put the new node

	while (p != NULL && no > p->acctNo){   //  if p is not null and the new info is greater than p's info
		q = p;  //  change the chaser
		p = p->next;  //  go to the next door
	}

	if (p == list){  //  if x is the first node
		list = r;  //  make the new node the master ky
		r->next = p;  //  have p point to this new node
	}

	else if (p == NULL){  //  if x is the last node
		q->next = r;  //  put it at the end
	}

	else {  //  if neither nor
		r->next = p;  //  put it at the middle
		q->next = r;
	}
}


void ORDERED_LIST::showBalance(int no){
	if (list == NULL){  //  if null, the list could not find it
		cout << "Account not found." << endl;
	}
	else{
		node *p = list;  //  p is a pointer of type node that is equal to list
		while (p->acctNo != no && p != NULL){  //  look for the acct
			p = p->next;
			if (p == NULL) break;
		}
		if (p == NULL){  //  if null, the list could not find it
			cout << "Account not found." << endl;
		}
		else{  //  if they could, then print
			cout << p->name << ", your balance is " << p->balance << endl;
		}
	}
}

void ORDERED_LIST::deposit(int no){
	float amount;
	if (list == NULL){  //  if null, the list could not find it
		cout << "Account not found." << endl;
	}
	else{
		node *p = list;  //  p is a pointer of type node that is equal to list
		while (p->acctNo != no && p != NULL){  //  look for the acct
			p = p->next;
			if (p == NULL) break;
		}
		if (p == NULL){  //  if null the list could not find it
			cout << "Account not found." << endl;
		}
		else{  //  if they can find it
			cout << p->name << " how much would you like to deposit?  ";
			cin >> amount;  //  ask for deposit ammount
			cout << endl;
			p->balance = p->balance + amount;  //  calculate
			cout << p->name << " your new balance is " << p->balance << endl;  //  print
		}
	}
}

void ORDERED_LIST::withdraw(int no){
	float amount;
	if (list == NULL){  //  if null, the list could not find it
		cout << "Account not found." << endl;
	}
	else{
		node *p = list;  //  p is a pointer of type node that is equal to list
		cout << endl;
		while (p->acctNo != no && p != NULL){  //  look for the acct
			p = p->next;
			if (p == NULL) break;
		}
		if (p == NULL){  //  if null then we couldn't find it
			cout << "Account not found." << endl;
		}
		else{  //  else then we did
			cout << p->name << " how much would you like to withdraw?  ";
			cin >> amount;  //  ask for withdraw amount
			cout << endl;
			p->balance = p->balance - amount;  //  calculate
			cout << p->name << " your new balance is " << p->balance << endl;  //  print
		}
	}
}

void ORDERED_LIST::display(){
	node *p = list;  //  make a new key copy
	while (p != NULL){  //  while it is pointing to osmething
		cout << p->acctNo << ", " << p->name << "->\t";  //  print the info
		p = p->next;  //  next door
	}
	cout << "NULL";
}


#endif
